// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package cetic.be.objectiver.oslc.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import cetic.be.objectiver.oslc.resources.Oslc_objectiverDomainConstants;


import cetic.be.objectiver.oslc.resources.Oslc_objectiverDomainConstants;


// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_objectiverDomainConstants.GOAL_NAMESPACE)
@OslcName(Oslc_objectiverDomainConstants.GOAL_LOCALNAME)
@OslcResourceShape(title = "Goal Shape", describes = Oslc_objectiverDomainConstants.GOAL_TYPE)
public class Goal
    extends AbstractResource
    implements IGoal
{
    // Start of user code attributeAnnotation:name
    // End of user code
    private String name;
    // Start of user code attributeAnnotation:type
    // End of user code
    private String type;
    // Start of user code attributeAnnotation:def
    // End of user code
    private String def;
    // Start of user code attributeAnnotation:priority
    // End of user code
    private String priority;
    // Start of user code attributeAnnotation:category
    // End of user code
    private String category;
    // Start of user code attributeAnnotation:issue
    // End of user code
    private String issue;
    // Start of user code attributeAnnotation:externalId
    // End of user code
    private String externalId;
    // Start of user code attributeAnnotation:openId
    // End of user code
    private String openId;
    // Start of user code attributeAnnotation:diagrams
    // End of user code
    private Set<Integer> diagrams = new HashSet<Integer>();
    // Start of user code attributeAnnotation:refdiagrams
    // End of user code
    private Set<Integer> refdiagrams = new HashSet<Integer>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Goal()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Goal(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_objectiverDomainConstants.GOAL_PATH,
        Goal.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Goal Resource} - update Goal.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public void addDiagrams(final Integer diagrams)
    {
        this.diagrams.add(diagrams);
    }
    
    public void addRefdiagrams(final Integer refdiagrams)
    {
        this.refdiagrams.add(refdiagrams);
    }
    
    
    // Start of user code getterAnnotation:name
    // End of user code
    @OslcName("name")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "name")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getName()
    {
        // Start of user code getterInit:name
        // End of user code
        return name;
    }
    
    // Start of user code getterAnnotation:type
    // End of user code
    @OslcName("type")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "type")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getType()
    {
        // Start of user code getterInit:type
        // End of user code
        return type;
    }
    
    // Start of user code getterAnnotation:def
    // End of user code
    @OslcName("def")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "def")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getDef()
    {
        // Start of user code getterInit:def
        // End of user code
        return def;
    }
    
    // Start of user code getterAnnotation:priority
    // End of user code
    @OslcName("priority")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "priority")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getPriority()
    {
        // Start of user code getterInit:priority
        // End of user code
        return priority;
    }
    
    // Start of user code getterAnnotation:category
    // End of user code
    @OslcName("category")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "category")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getCategory()
    {
        // Start of user code getterInit:category
        // End of user code
        return category;
    }
    
    // Start of user code getterAnnotation:issue
    // End of user code
    @OslcName("issue")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "issue")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getIssue()
    {
        // Start of user code getterInit:issue
        // End of user code
        return issue;
    }
    
    // Start of user code getterAnnotation:externalId
    // End of user code
    @OslcName("externalId")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "externalId")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getExternalId()
    {
        // Start of user code getterInit:externalId
        // End of user code
        return externalId;
    }
    
    // Start of user code getterAnnotation:openId
    // End of user code
    @OslcName("openId")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "openId")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getOpenId()
    {
        // Start of user code getterInit:openId
        // End of user code
        return openId;
    }
    
    // Start of user code getterAnnotation:diagrams
    // End of user code
    @OslcName("diagrams")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "diagrams")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Integer)
    @OslcReadOnly(false)
    public Set<Integer> getDiagrams()
    {
        // Start of user code getterInit:diagrams
        // End of user code
        return diagrams;
    }
    
    // Start of user code getterAnnotation:refdiagrams
    // End of user code
    @OslcName("refdiagrams")
    @OslcPropertyDefinition(Oslc_objectiverDomainConstants.OBJECTIVERWEB_NAMSPACE + "refdiagrams")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Integer)
    @OslcReadOnly(false)
    public Set<Integer> getRefdiagrams()
    {
        // Start of user code getterInit:refdiagrams
        // End of user code
        return refdiagrams;
    }
    
    
    // Start of user code setterAnnotation:name
    // End of user code
    public void setName(final String name )
    {
        // Start of user code setterInit:name
        // End of user code
        this.name = name;
    
        // Start of user code setterFinalize:name
        // End of user code
    }
    
    // Start of user code setterAnnotation:type
    // End of user code
    public void setType(final String type )
    {
        // Start of user code setterInit:type
        // End of user code
        this.type = type;
    
        // Start of user code setterFinalize:type
        // End of user code
    }
    
    // Start of user code setterAnnotation:def
    // End of user code
    public void setDef(final String def )
    {
        // Start of user code setterInit:def
        // End of user code
        this.def = def;
    
        // Start of user code setterFinalize:def
        // End of user code
    }
    
    // Start of user code setterAnnotation:priority
    // End of user code
    public void setPriority(final String priority )
    {
        // Start of user code setterInit:priority
        // End of user code
        this.priority = priority;
    
        // Start of user code setterFinalize:priority
        // End of user code
    }
    
    // Start of user code setterAnnotation:category
    // End of user code
    public void setCategory(final String category )
    {
        // Start of user code setterInit:category
        // End of user code
        this.category = category;
    
        // Start of user code setterFinalize:category
        // End of user code
    }
    
    // Start of user code setterAnnotation:issue
    // End of user code
    public void setIssue(final String issue )
    {
        // Start of user code setterInit:issue
        // End of user code
        this.issue = issue;
    
        // Start of user code setterFinalize:issue
        // End of user code
    }
    
    // Start of user code setterAnnotation:externalId
    // End of user code
    public void setExternalId(final String externalId )
    {
        // Start of user code setterInit:externalId
        // End of user code
        this.externalId = externalId;
    
        // Start of user code setterFinalize:externalId
        // End of user code
    }
    
    // Start of user code setterAnnotation:openId
    // End of user code
    public void setOpenId(final String openId )
    {
        // Start of user code setterInit:openId
        // End of user code
        this.openId = openId;
    
        // Start of user code setterFinalize:openId
        // End of user code
    }
    
    // Start of user code setterAnnotation:diagrams
    // End of user code
    public void setDiagrams(final Set<Integer> diagrams )
    {
        // Start of user code setterInit:diagrams
        // End of user code
        this.diagrams.clear();
        if (diagrams != null)
        {
            this.diagrams.addAll(diagrams);
        }
    
        // Start of user code setterFinalize:diagrams
        // End of user code
    }
    
    // Start of user code setterAnnotation:refdiagrams
    // End of user code
    public void setRefdiagrams(final Set<Integer> refdiagrams )
    {
        // Start of user code setterInit:refdiagrams
        // End of user code
        this.refdiagrams.clear();
        if (refdiagrams != null)
        {
            this.refdiagrams.addAll(refdiagrams);
        }
    
        // Start of user code setterFinalize:refdiagrams
        // End of user code
    }
    
    
}
